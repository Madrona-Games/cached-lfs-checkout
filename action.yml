name: "Cached LFS checkout"

description: "Git checkout with LFS files from cache"

branding:
  icon: "download"
  color: "green"

inputs:
  include:
    description: "Explicitly include files for LFS"
    required: false
    default: "*"
  exclude:
    description: "Explicitly exclude files for LFS"
    required: false
    default: ""
  fetch-depth:
    description: "Number of commits to fetch. 0 indicates all history for all tags and branches"
    required: false
    default: 1
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    required: false
    default: ""
  repository:
    description: "Repository name with owner. For example, actions/checkout"
    default: ${{ github.repository }}
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.
      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.
      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    required: false
    default: ${{ github.token }}
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.
    required: false
    default: false
  persist-credentials:
    description: >
      'Whether to configure the token or SSH key with the local git config'
    required: false
    default: true
  enableCrossOsArchive:
    description: >
      Whether the cache is cross-os compatible. This is useful to cache dependencies which
      are independent of the runner platform. This will help reduce the consumption of the
      cache quota and help build for multiple platforms from the same cache.
      [Learn more about cross-os caching](https://github.com/actions/cache/blob/main/tips-and-workarounds.md#cross-os-cache).
    required: false
    default: false
  cacheProvider:
    description: >
      The cache provider to use. Supported providers are `github`, `s3`, and `google-drive`
    required: false
    default: github
  s3Endpoint:
    description: "The URL of the S3 bucket to use for caching"
    required: false
  s3AccessKey:
    description: "The access key for the S3 bucket"
    required: false
  s3SecretKey:
    description: "The secret key for the S3 bucket"
    required: false
  s3BucketName:
    description: "The name of the S3 bucket to use for caching"
    required: false
  s3Port:
    description: "The port of the S3 bucket to use for caching"
    required: false
  googleServiceAccountCredentialsJSON:
    description: "The JSON contents of the Google Service Account credentials file"
    required: false
  googleDriveFolderID:
    description: "The ID of the Google Drive folder to use for caching"
    required: false
  mainBranchRefName:
    description: "The name of the main branch"
    required: false
    default: "main"
  restoreOnly:
    description: "Only restore the cache, do not save the cache"
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        ref: ${{ inputs.ref }}
        repository: ${{ inputs.repository }}
        token: ${{ inputs.token }}
        submodules: ${{ inputs.submodules }}
        persist-credentials: ${{ inputs.persist-credentials }}

    - name: Create LFS file list
      run: |
        git lfs ls-files --long --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}" | cut -d ' ' -f1 > .lfs-assets-id-unsorted
        git submodule foreach git lfs ls-files --long --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}" | cut -d ' ' -f1 >> .lfs-assets-id-unsorted
        cat .lfs-assets-id-unsorted | sort > .lfs-assets-id
      shell: bash

    - name: Create Submodule LFS Cache Paths
      run: |
        CACHE_PATHS=""

        # loop over the git submodule paths to generate a list of module directories to cache
        # `git config` is used to extract the `path` value for each git submodule
        # for more information about the .gitmodules file, see: https://git-scm.com/docs/gitmodules
        while read line; do
          CACHE_PATHS+=".git/modules/$line/lfs "
        done < <(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')

        echo "CACHE_PATHS=$CACHE_PATHS" >> $GITHUB_OUTPUT
      id: cache-paths
      shell: bash

    - name: Restore LFS cache from Github
      uses: actions/cache@v4
      if: inputs.cacheProvider == 'github' && !inputs.restoreOnly
      with:
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-v3-${{ github.ref_name }}-${{ hashFiles('.lfs-assets-id') }}
        restore-keys: |
          lfs-v3-${{ github.ref_name }}-
          lfs-v3-${{ inputs.mainBranchRefName }}-
          lfs-v3-
        enableCrossOsArchive: ${{ inputs.enableCrossOsArchive }}

    - name: Restore Only LFS cache from Github
      uses: actions/cache/restore@v4
      if: inputs.cacheProvider == 'github' && inputs.restoreOnly
      with:
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-v3-${{ github.ref_name }}-${{ hashFiles('.lfs-assets-id') }}
        restore-keys: |
          lfs-v3-${{ github.ref_name }}-
          lfs-v3-${{ inputs.mainBranchRefName }}-
          lfs-v3-
        enableCrossOsArchive: ${{ inputs.enableCrossOsArchive }}

    - name: Restore LFS cache from Google Drive
      uses: madrona-games/google-drive-actions/cache@v1
      if: inputs.cacheProvider == 'google-drive' && !inputs.restoreOnly
      with:
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-v3-${{ github.ref_name }}-${{ hashFiles('.lfs-assets-id') }}
        restore-keys: |
          lfs-v3-${{ github.ref_name }}-
          lfs-v3-${{ inputs.mainBranchRefName }}-
          lfs-v3-
        google-service-account-credentials-json: ${{ inputs.googleServiceAccountCredentialsJSON }}
        google-drive-folder-id: ${{ inputs.googleDriveFolderID }}

    - name: Restore Only LFS cache from Google Drive
      uses: madrona-games/google-drive-actions/cache/restore@v1
      if: inputs.cacheProvider == 'google-drive' && inputs.restoreOnly
      with:
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-v3-${{ github.ref_name }}-${{ hashFiles('.lfs-assets-id') }}
        restore-keys: |
          lfs-v3-${{ github.ref_name }}-
          lfs-v3-${{ inputs.mainBranchRefName }}-
          lfs-v3-
        google-service-account-credentials-json: ${{ inputs.googleServiceAccountCredentialsJSON }}
        google-drive-folder-id: ${{ inputs.googleDriveFolderID }}

    - name: Restore LFS cache from S3
      if: inputs.cacheProvider == 's3' && !inputs.restoreOnly
      uses: madrona-games/s3-actions-cache@v1
      with:
        endpoint: ${{ inputs.s3Endpoint }}
        port: ${{ inputs.s3Port }}
        accessKey: ${{ inputs.s3AccessKey }}
        secretKey: ${{ inputs.s3SecretKey }}
        bucket: ${{ inputs.s3BucketName }}
        use-fallback: false
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-v3-${{ github.ref_name }}-${{ hashFiles('.lfs-assets-id') }}
        restore-keys: |
          lfs-v3-${{ github.ref_name }}-
          lfs-v3-${{ inputs.mainBranchRefName }}-
          lfs-v3-

    - name: Only Restore LFS cache from S3
      if: inputs.cacheProvider == 's3' && inputs.restoreOnly
      uses: madrona-games/s3-actions-cache/restore@v1
      with:
        endpoint: ${{ inputs.s3Endpoint }}
        port: ${{ inputs.s3Port }}
        accessKey: ${{ inputs.s3AccessKey }}
        secretKey: ${{ inputs.s3SecretKey }}
        bucket: ${{ inputs.s3BucketName }}
        use-fallback: false
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-v3-${{ github.ref_name }}-${{ hashFiles('.lfs-assets-id') }}
        restore-keys: |
          lfs-v3-${{ github.ref_name }}-
          lfs-v3-${{ inputs.mainBranchRefName }}-
          lfs-v3-

    - name: Git LFS Pull
      run: |
        git lfs pull --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}"
        git submodule foreach git lfs pull --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}"
      shell: bash

    # Don't leave behind temp files in case build system checks for dirty workspace
    - name: Cleanup Temp Files
      run: |
        rm .lfs-assets-id-unsorted
        rm .lfs-assets-id
      shell: bash
